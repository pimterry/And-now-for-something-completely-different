doctype html
html
  head
    meta(charset='utf-8')
    meta(name='viewport', content='width=device-width, initial-scale=1, maximum-scale=1')
    title And now for something completely different

    link(rel='stylesheet', type='text/css', href='build/build.css')

    link(rel="stylesheet", type="text/css", href="http://fonts.googleapis.com/css?family=Titillium+Web:700")
  body

    article

      section
        h1.title
          | And &nbsp;now &nbsp;for something completely different

      section
        h2 INTERCAL
        pre
          code.language-clike.
            $ ./myIntercalProgram
            ONE
            TWO
            THREE

            CXXIII
        aside
          ul
            li We'll start with intercal
            li Intercal is a language that accepts input and output only numerically
            li Input in the form of spelled words, in English, Sanscrit or Latin
            li Output in what it calls 'butchered roman numerals'

      section
        h2 INTERCAL
        pre
          code.language-clike.
            DO ,1 <- #13
            PLEASE DO ,1 SUB #1 <- #238
            DO ,1 SUB #2 <- #108
            DO ,1 SUB #3 <- #112
            DO ,1 SUB #4 <- #0
            DO ,1 SUB #5 <- #64
            DO ,1 SUB #6 <- #194
            DO ,1 SUB #7 <- #48
            PLEASE DO ,1 SUB #8 <- #22
            DO ,1 SUB #9 <- #248
            DO ,1 SUB #10 <- #168
            DO ,1 SUB #11 <- #24
            DO ,1 SUB #12 <- #16
            DO ,1 SUB #13 <- #162
            PLEASE READ OUT ,1
            PLEASE GIVE UP
        aside
          ul
            li 

      section
        h2 Program flow

      section
        h2 Befunge
        pre
          code.language-clike.
            > 25*"dlroW olleH":v

                         v : , _ @

                         &gt;     ^
        aside

      section
        h2 Piet
        img(src='images/piet-helloworld.jpg').wide

      section
        h2 NoFlo
        img(src='images/noflo.jpg').wide

      section
        h1 Types

      section
        h2 Rexx
        pre
          code.language-clike.
            a='Result'
            b='3'
            c='7'
            d=a":" b*c
            say d /* prints "Result:21" */

      section
        h2 Idris
        pre
          code.language-clike.
            concat : Array n t -> Array m t -> Array (n + m) t

        h5 C# equivalent:
        pre
          code.language-clike.
            Array&lt;N + M, T&gt; Concat(Array&lt;N, T&gt; xs, Array&lt;M, T&gt; ys) {
                ...
            }
        aside
          ul
            li Idris is a strongly staticly typed functional language
            li This top part here is Idris; we're defining just the type of a concat function
            li Concatenates two arrays together and returns the result
            li Notably n and m here, as part of the type, are integers, while t is the type of the elements of the array
            li So an array of one apple concatenated with an array of two apples gives an array of three apples.
            li These are types containing integers; not like a list of integers, but a list of one.
            li All of a sudden you can check contraints in your types you could never check in languages like C# or Java

      section
        h2 Eiffel
        pre
          code.language-markup.
            withdraw_from_bank_account(amount: INTEGER) is
                require
                    amount >= 0
                    balance - amount >= 0

                do
                    recordTransaction(-amount)

                ensure
                    balance = old balance - amount

      section
        h1 Abstractions

      section
        h2 Python
        h3 Explicit is better than implicit

      section
        h2 Ruby
        h3 Easy is better than simple

      section
        h2 Homespring
        pre
          code.language-clike.
            Universe of bear hatchery says Hello. World!.
             It   powers      the marshy things
            the power of the snowmelt overrides.
        h6 "Because programming isnâ€™t like a river, but it damn well ought to be."

      section
        h1.title Thank you
        ul
          li There are sometimes better ways of expressing program structure
          li There are many ways to check program correctness
          li Static/dynamic typing != strong/weak typing
          li There are conflicting opinions on language philosophy, and it matters
          li Salmon spawning is not the right metaphor

    script(src='build/build.js')
